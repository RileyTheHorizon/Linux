Для того, чтобы на всех серверах работал интернет, на сервере inetRouter должен быть настроен NAT. В нашем Vagrantfile он настраивался с помощью команды: 
iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
При настройке NAT таким образом, правило удаляется после перезагрузки сервера. Для того, чтобы правила применялись после перезагрузки, в Ubuntu 22.04 нужно выполнить следующие действия:

1)Подключиться по SSH к хосту

2)Проверить, что отключен другой файервол:

root@inetRouter:/home/vagrant# systemctl status ufw
● ufw.service - Uncomplicated firewall
     Loaded: loaded (/lib/systemd/system/ufw.service; enabled; vendor preset: enabled)
     Active: active (exited) since Mon 2025-10-13 20:25:09 UTC; 55min ago
       Docs: man:ufw(8)
   Main PID: 528 (code=exited, status=0/SUCCESS)
        CPU: 2ms

3)Если служба будет запущена, то нужно её отключить и удалить из автозагрузки:
root@inetRouter:/home/vagrant# systemctl stop ufw
root@inetRouter:/home/vagrant# systemctl disable ufw
Synchronizing state of ufw.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install disable ufw


4)Создаём файл /etc/iptables_rules.ipv4:
vi /etc/iptables_rules.ipv4

# Generated by iptables-save v1.8.7 on Sat Oct 14 16:14:36 2023
*filter
:INPUT ACCEPT [90:8713]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [54:7429]
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
COMMIT
# Completed on Sat Oct 14 16:14:36 2023
# Generated by iptables-save v1.8.7 on Sat Oct 14 16:14:36 2023
*nat
:PREROUTING ACCEPT [1:44]
:INPUT ACCEPT [1:44]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
COMMIT
# Completed on Sat Oct 14 16:14:36 2023



# Generated by iptables-save v1.8.7 on Sat Oct 14 16:14:36 2023
*filter
:INPUT ACCEPT [90:8713]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [54:7429]
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
COMMIT
# Completed on Sat Oct 14 16:14:36 2023
# Generated by iptables-save v1.8.7 on Sat Oct 14 16:14:36 2023
*nat
:PREROUTING ACCEPT [1:44]
:INPUT ACCEPT [1:44]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
COMMIT
# Completed on Sat Oct 14 16:14:36 2023

6) Создаём файл, в который добавим скрипт автоматического восстановления правил при перезапуске системы:
vi /etc/network/if-pre-up.d/iptables

#!/bin/sh
/sbin/iptables-restore < /etc/iptables_rules.ipv4

8) Добавляем права на выполнение файла /etc/network/if-pre-up.d/iptables
root@inetRouter:/home/vagrant# sudo chmod +x /etc/network/if-pre-up.d/iptables

9)Перезагружаем сервер: reboot

10) После перезагрузки сервера проверяем правила iptables: iptables-save
    
root@inetRouter:/home/vagrant# iptables-save
# Generated by iptables-save v1.8.7 on Mon Oct 13 21:42:24 2025
*filter
:INPUT ACCEPT [100:23437]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [90:10573]
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
COMMIT
# Completed on Mon Oct 13 21:42:24 2025
# Generated by iptables-save v1.8.7 on Mon Oct 13 21:42:24 2025
*nat
:PREROUTING ACCEPT [1:44]
:INPUT ACCEPT [1:44]
:OUTPUT ACCEPT [26:2182]
:POSTROUTING ACCEPT [4:248]
-A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
COMMIT
# Completed on Mon Oct 13 21:42:24 2025
Маршрутизация транзитных пакетов (IP forward)
Важным этапом настройки сетевой лаборатории, является маршрутизация транзитных пакетов. Если объяснить простыми словами — это возможность сервера Linux пропускать трафик через себя к другому серверу. По умолчанию эта функция отключена в Linux. Включить её можно командой: 
echo "net.ipv4.conf.all.forwarding = 1" >> /etc/sysctl.conf
sysctl -p

Посмотреть статус форвардинга можно командой: sysctl net.ipv4.ip_forward
Если параметр равен 1, то маршрутизация транзитных пакетов включена, если 0 — отключена. 

В нашей схеме необходимо включить данную маршрутизацию на всех роутерах.
root@inetRouter:/home/vagrant# sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1

root@centralRouter:/home/vagrant# sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1

root@office1Router:/home/vagrant#  sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1

root@office2Router:/home/vagrant#  sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1

Отключение маршрута по умолчанию на интерфейсе eth0

При разворачивании нашего стенда Vagrant создает в каждом сервере свой интерфейс, через который у сервера появляется доступ в интернет. Отключить данный порт нельзя, так как через него Vagrant подключается к серверам. Обычно маршрут по умолчанию прописан как раз на этот интерфейс, данный маршрут нужно отключить:


Для отключения маршрута по умолчанию в файле /etc/netplan/00-installer-config.yaml добавляем отключение маршрутов, полученных через DHCP:

# This is the network config written by 'subiquity'
network:
  ethernets:
    eth0:
      dhcp4: true
      dhcp4-overrides:
          use-routes: false
      dhcp6: false
  version: 2

После внесения данных изменений перезапускаем сетевую службу: 
netplan try

Отключение дефолтного маршрута требуется настроить на всех хостах кроме inetRouter
Настройка статических маршрутов

Для настройки статических маршрутов используется команда ip route. 

Давайте рассмотрим пример настройки статического маршрута на сервере office1Server. Исходя из схемы мы видим, что трафик с данного сервера будет идти через office1Router. Office1Server и office1Router у нас соединены через сеть managers (192.168.2.128/26). В статическом маршруте нужно указывать адрес следующего хоста. Таким образом мы должны указать на сервере office1Server маршрут, в котором доступ к любым IP-адресам у нас будет происходить через адрес 192.168.2.129, который расположен на сетевом интерфейсе office1Router. Команда будет выглядеть так: ip route add 0.0.0.0/0 via 192.168.2.129 

Посмотреть список всех маршрутов: ip route
Посмотреть список всех маршрутов: ip route
root@office1Server:~# ip r
default via 192.168.2.129 dev eth1
10.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 metric 100
10.0.2.2 dev eth0 proto dhcp scope link src 10.0.2.15 metric 100
10.0.2.3 dev eth0 proto dhcp scope link src 10.0.2.15 metric 100
192.168.2.128/26 dev eth1 proto kernel scope link src 192.168.2.130
192.168.50.0/24 dev eth2 proto kernel scope link src 192.168.50.21
root@office1Server:~#

Удалить маршрут: ip route del 0.0.0.0/0 via 192.168.2.129 
Важно помнить, что маршруты, настроенные через команду ip route удаляются после перезагрузки или перезапуске сетевой службы. 

Для того, чтобы маршруты сохранялись после перезагрузки нужно их указывать непосредственно в файле конфигурации сетевых интерфейсов:

В современных версиях Ubuntu, для указания маршрута нужно поправить netplan-конфиг. Конфиги netplan хранятся в виде YAML-файлов и обычно лежат в каталоге /etc/netplan
В нашем стенде такой файл - /etc/netplan/50-vagrant.yaml 

Для добавления маршрута, после раздела addresses нужно добавить блок:
routes:
      - to: <сеть назначения>/<маска>
   via: <Next hop address>

Пример файла /etc/netplan/50-vagrant.yaml

     ---
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      addresses:
      - 192.168.2.130/26
      routes:
      - to: 0.0.0.0/0
        via: 192.168.2.129
    enp0s19:
      addresses:
      - 192.168.50.21/24

В YAML-файле очень важно следить за правильными отступами, ошибка в один пробел не даст сохранить изменения.

Применение изменений: 
root@office1Server:~# netplan try
Do you want to keep these settings?

Press ENTER before the timeout to accept the new configuration

Changes will revert in 120 seconds
Configuration accepted.
root@office1Server:~#


При настройке интерфейсов и маршрутов в любой из ОС можно оставлять комментарии в файле. Перед комментарием должен стоять знак «#»

Настройте самостоятельно все маршруты на серверах. Важно помнить, что помимо маршрутов по умолчанию, вам нужно будет использовать обратные маршруты. 

Давайте разберем пример такого маршрута: допустим мы хотим отправить команду ping с сервера office1Server (192.168.2.130) до сервера centralRouter (192.168.0.1) 
Наш трафик пойдёт следующим образом: office1Server — office1Router — centralRouter — office1Router — office1Server

Office1Router знает сеть (192.168.2.128/26), в которой располагается сервер office1Server, а сервер centralRouter, когда получит запрос от адреса 192.168.2.130 не будет понимать, куда отправить ответ. Решением этой проблемы будет добавление обратного маршрута. 

Обратный маршрут указывается также как остальные маршруты. Изучив схему мы видим, что связь между сетями 192.168.2.0/24 и 192.168.0.0/24 осуществляется через сеть 192.168.255.8/30. Также мы видим что сети office1 подключены к centralRouter через порт eth5. На основании этих данных мы можем добавить маршрут в файл /etc/netplan/50-vagrant.yaml

	eth5:
        addresses:
        - 192.168.255.9/30
        routes:
        - to: 192.168.2.0/24
          via: 192.168.255.8

Пример проверки выхода в Интернет через сервер inetRouter c хоста office1Server:
root@office1Server:/home/vagrant# traceroute 8.8.8.8
traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets
 1  _gateway (192.168.2.129)  0.651 ms  0.983 ms  1.211 ms
 2  192.168.255.9 (192.168.255.9)  5.504 ms  5.163 ms  11.643 ms
 3  192.168.255.1 (192.168.255.1)  12.384 ms  12.418 ms  12.412 ms
 4  10.0.2.2 (10.0.2.2)  12.499 ms  12.769 ms  12.452 ms
 5  * * *
 6  * * *
 7  * * *
 8  * * *
 9  * * *
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  * * *
19  * * *
20  * * *
21  * * *
22  * * *
23  * * *
24  * * *
25  * * *
26  * * *
27  * * *
28  * * *
29  * * *
30  * * *

